// Services backend for SampleBackend
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AppNow (http://appnow.radarconline.com) 
//     Code-gen engine version: 4.4.2.19133 
//     MEAN generator version:  0.2.8.1
//     at:                      12/5/2014 9:52:15 AM UTC
// </auto-generated>
//------------------------------------------------------------------------------

var newrelic = require('newrelic');
var configuration = require('./conf/configuration').getConfiguration(process.env.HSU_ENV); //Get enviroment from HSU_ENV

/*
//-- 3Scale ----
var ThreeScale = require('3scale').Client;
var client = new ThreeScale("3b2f885ee82757e1d0b81db389b8aba1");
// you will usually obtain user_key from request params
client.authrep({ 
        user_key: "3dec2adf1322ad418cd1a1c6f8d25203",
        app_id: ""    
    }, function(response){
    if(response.is_success()) {
        // continue
    } else {
        throw new Error("not authorized " + response.error_message);
    }
});
*/

var S = require('string');
var express = require('express');
var compression = require('compression');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var morgan = require('morgan');
var mongoose = require('mongoose');
var baucis = require('baucis');
var swagger = require('baucis-swagger');
var path = require('path');

var models = require('./model');
var auth = require('./conf/auth');
var https = require("https");


//redis
var redis = require('redis');
var url = require('url');
var redisClient = null;
if (process.env.REDISCLOUD_URL) {
    //enable redis is cnx string is present
    var redisURL = url.parse(process.env.REDISCLOUD_URL);
    redisClient = redis.createClient(redisURL.port, redisURL.hostname, {no_ready_check: true});
    redisClient.auth(redisURL.auth.split(":")[1]);
    //see redis doc at: https://devcenter.heroku.com/articles/rediscloud#using-redis-from-node-js
}



var rootHttpDir = '';
if (configuration.environment === 'production') {
    rootHttpDir = path.normalize(__dirname + '/../public-html/production');
} 
else {
    rootHttpDir = path.normalize(__dirname + '/../public');
}


var dbCnx = resolveMongoDbCnx();
mongoose.connect(dbCnx);

function resolveMongoDbCnx() {
//    var localDevelDatabase = 'mongodb://localhost:27017/hsu';
    var localDevelDatabase = 'mongodb://hsu:hsu@ds039251.mongolab.com:39251/heroku_app34785710';
    if (process.env.VCAP_SERVICES) {
        var vCap = JSON.parse(process.env.VCAP_SERVICES);

        if (vCap['mongodb-2.2']) {
            return vCap['mongodb-2.2'][0].credentials.url || localDevelDatabase;
        }
        else{
            return vCap['mongodb-2.4'][0].credentials.url || localDevelDatabase;
        }
    }
    return process.env.MONGOLAB_URI || localDevelDatabase;
}

require('./services/baucis-csv.js').apply(baucis);

// Create the express app 
var app = express();

//Configure app -------------------------------------
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
app.use(morgan('dev'));
app.use(compression({
    threshold: 512
}));  
app.use(bodyParser.urlencoded({
    extended: true,
    limit: '50mb'
}));
app.use(bodyParser.json({
    limit: '50mb'
}));
app.use(cookieParser());
app.use(session({ 
    secret: auth.security.apiKey,
    resave: true,
    saveUninitialized: true
}));


// Create the API routes & controllers  ---------------------------
var controllers = [];
Object.keys(models.models).forEach(function(key) { 
    var item = models.models[key];
    var controller = baucis.rest(item.name, item.model);
    item.controller = controller;
    controllers.push(controller);
});


//Add domain services -----------------------------------------------
require('./services/export').apply(controllers);
require('./services/import').apply(app);
require('./services/familia').apply(models);
require('./services/ciudadano').apply(models);
require('./services/timeline').apply(models);
require('./services/tramitador').apply(app, models);
require('./services/mobile').apply(app);
require('./services/general').apply(app, models);
require('./services/authz').apply(app);
require('./services/cache').apply(models);
require('./services/optimizeCount').apply(controllers);
//---------------------------------------------------------------------

//Launch ---------------------
app.use('/api', baucis());

var staticCacheTime =  86400000 * 1;     // 1 days
app.use('/', express.static(rootHttpDir, { maxAge: staticCacheTime }));

var appPort = (process.env.VCAP_APP_PORT || process.env.PORT || 5000);
var appHost = (process.env.VCAP_APP_HOST || 'localhost');

app.listen(appPort);
//app.listen(appPort, appHost);

console.log('HSU - Server listening on: '+ appHost + ':' + appPort + ' Environment: '+ configuration.environment);

Object.keys(models.models).forEach(function(key) { 
    var resource = models.models[key];
    console.log('\tResource ' + S(resource.name).padRight(30) +' on   /api/' + resource.plural);
});
console.log('\tSwagger docs                            on   /api/documentation');
console.log('\tAngularJS admin web-client              on   /');
console.log('\tServing public files from:                   ' + rootHttpDir);
console.log('Application up and ready.');
